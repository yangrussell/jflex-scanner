/* The following code was generated by JFlex 1.7.0 */

package scanner;

/**
* This file defines a simple lexer for the compilers course 2017-2018
* Comment this file
*/
import java.io.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/zhuyy/Documents/Coursework/2019-2020/Compilers/jflex/ContactInfoJflex.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\4\1\5\1\1\22\0\1\14\14\0\1\13"+
    "\1\10\1\23\12\11\1\22\5\0\1\7\32\12\4\0\1\6\1\0"+
    "\1\15\1\27\1\30\3\15\1\24\1\16\1\25\3\15\1\32\1\15"+
    "\1\31\1\20\2\15\1\21\1\17\1\26\5\15\12\0\1\4\44\0"+
    "\1\6\12\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0"+
    "\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0"+
    "\165\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0"+
    "\255\6\1\0\46\6\2\0\1\6\7\0\47\6\11\0\55\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0\33\6\5\0"+
    "\3\6\35\0\13\6\5\0\100\6\12\11\4\0\146\6\1\0\10\6"+
    "\2\0\12\6\1\0\6\6\12\11\3\6\2\0\1\6\20\0\73\6"+
    "\2\0\145\6\16\0\12\11\54\6\4\0\1\6\5\0\56\6\22\0"+
    "\34\6\104\0\25\6\1\0\10\6\26\0\16\6\1\0\201\6\2\0"+
    "\12\11\1\0\23\6\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\11\6\2\0\2\6\2\0"+
    "\4\6\10\0\1\6\4\0\2\6\1\0\5\6\2\0\12\11\2\6"+
    "\17\0\3\6\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\6\1\0\5\6"+
    "\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\6\1\0\1\6"+
    "\7\0\12\11\6\6\13\0\3\6\1\0\11\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\12\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\6\17\0\4\6\2\0\12\11\11\0"+
    "\1\6\7\0\3\6\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\11\6\2\0\2\6\2\0"+
    "\3\6\10\0\2\6\4\0\2\6\1\0\5\6\2\0\12\11\1\0"+
    "\1\6\20\0\2\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\6\6\0"+
    "\1\6\16\0\12\11\20\0\4\6\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\20\6\3\0\10\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\3\6\5\0\4\6\2\0\12\11\20\0\4\6\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\11\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0\1\6\1\0"+
    "\4\6\2\0\12\11\1\0\2\6\16\0\3\6\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\10\6\1\0\3\6\1\0\5\6\5\0"+
    "\4\6\7\0\5\6\2\0\12\11\12\0\6\6\2\0\2\6\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\6\4\0\6\6\1\0\1\6\1\0\10\6\6\0\12\11\2\0"+
    "\2\6\15\0\72\6\5\0\17\6\1\0\12\11\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\15\6\1\0\3\6\2\0\5\6\1\0\1\6\1\0\6\6\2\0"+
    "\12\11\2\0\4\6\40\0\1\6\27\0\2\6\6\0\12\11\13\0"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\12\6\1\0\44\6\4\0"+
    "\24\6\1\0\22\6\1\0\44\6\11\0\1\6\71\0\100\6\12\11"+
    "\6\0\100\6\12\11\4\6\2\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6"+
    "\1\0\4\6\2\0\103\6\2\0\3\6\40\0\20\6\20\0\126\6"+
    "\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6"+
    "\3\0\13\6\7\0\15\6\1\0\7\6\13\0\25\6\13\0\24\6"+
    "\14\0\15\6\1\0\3\6\1\0\2\6\14\0\124\6\3\0\1\6"+
    "\4\0\2\6\2\0\12\11\41\0\3\6\2\0\12\11\6\0\130\6"+
    "\10\0\53\6\5\0\106\6\12\0\37\6\1\0\14\6\4\0\14\6"+
    "\12\0\12\11\36\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0"+
    "\12\11\46\0\34\6\4\0\77\6\1\0\35\6\2\0\1\6\12\11"+
    "\6\0\12\11\15\0\1\6\10\0\17\6\101\0\114\6\4\0\12\11"+
    "\21\0\11\6\14\0\60\6\12\11\72\6\14\0\70\6\10\0\12\11"+
    "\3\0\3\6\12\11\44\6\2\0\11\6\107\0\3\6\1\0\43\6"+
    "\1\0\2\6\6\0\366\6\5\0\u011b\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\53\0\1\4\1\4\25\0\2\6\23\0\1\6\34\0"+
    "\1\6\15\0\1\6\20\0\15\6\63\0\41\6\21\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\21\0\51\6\u032d\0\64\6\u0716\0\57\6\1\0"+
    "\57\6\1\0\205\6\6\0\11\6\14\0\46\6\1\0\1\6\5\0"+
    "\1\6\2\0\70\6\7\0\1\6\17\0\30\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\40\6\57\0\1\6\u01d5\0\3\6\31\0"+
    "\17\6\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\6\2\0"+
    "\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0"+
    "\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51d6\6\52\0\u048d\6\103\0"+
    "\56\6\2\0\u010d\6\3\0\20\6\12\11\2\6\24\0\63\6\1\0"+
    "\12\6\1\0\163\6\45\0\11\6\2\0\147\6\2\0\44\6\1\0"+
    "\10\6\77\0\61\6\30\0\64\6\14\0\106\6\12\0\12\11\6\0"+
    "\30\6\3\0\1\6\1\0\1\6\2\0\12\11\44\6\2\0\44\6"+
    "\14\0\35\6\3\0\101\6\16\0\1\6\12\11\6\0\20\6\12\11"+
    "\5\6\1\0\67\6\11\0\16\6\2\0\12\11\6\0\27\6\3\0"+
    "\111\6\30\0\3\6\2\0\20\6\2\0\5\6\12\0\6\6\2\0"+
    "\6\6\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0"+
    "\12\6\12\0\173\6\1\0\2\6\2\0\12\11\6\0\u2ba4\6\14\0"+
    "\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0"+
    "\5\6\5\0\14\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\14\6\4\0\20\6\20\0\20\6\3\0\2\6\30\0"+
    "\3\6\40\0\5\6\1\0\207\6\23\0\12\11\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\43\0\14\6\1\0\32\6\1\0\23\6\1\0"+
    "\2\6\1\0\17\6\2\0\16\6\42\0\173\6\105\0\65\6\210\0"+
    "\1\6\202\0\35\6\3\0\61\6\17\0\1\6\37\0\40\6\20\0"+
    "\33\6\5\0\53\6\5\0\36\6\2\0\44\6\4\0\10\6\1\0"+
    "\5\6\52\0\236\6\2\0\12\11\6\0\44\6\4\0\44\6\4\0"+
    "\50\6\10\0\64\6\234\0\u0137\6\11\0\26\6\12\0\10\6\230\0"+
    "\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0"+
    "\27\6\12\0\27\6\11\0\37\6\101\0\23\6\1\0\2\6\12\0"+
    "\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\4\6\1\0"+
    "\2\6\5\0\10\6\1\0\3\6\1\0\33\6\4\0\3\6\4\0"+
    "\1\6\40\0\35\6\3\0\35\6\43\0\10\6\1\0\36\6\31\0"+
    "\66\6\12\0\26\6\12\0\23\6\15\0\22\6\156\0\111\6\67\0"+
    "\63\6\15\0\63\6\u030d\0\107\6\37\0\12\11\17\0\74\6\25\0"+
    "\31\6\7\0\12\11\6\0\65\6\1\0\12\11\20\0\44\6\2\0"+
    "\1\6\11\0\105\6\5\0\3\6\3\0\12\11\1\6\1\0\1\6"+
    "\43\0\22\6\1\0\45\6\6\0\1\6\101\0\7\6\1\0\1\6"+
    "\1\0\4\6\1\0\17\6\1\0\12\6\7\0\73\6\5\0\12\11"+
    "\6\0\4\6\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\11\6\2\0\2\6\2\0\3\6"+
    "\2\0\1\6\6\0\1\6\5\0\7\6\2\0\7\6\3\0\5\6"+
    "\213\0\113\6\5\0\12\11\46\0\106\6\1\0\1\6\10\0\12\11"+
    "\246\0\66\6\2\0\11\6\27\0\6\6\42\0\101\6\3\0\1\6"+
    "\13\0\12\11\46\0\70\6\10\0\12\11\66\0\32\6\3\0\17\6"+
    "\4\0\12\11\u0166\0\100\6\12\11\25\0\1\6\u01c0\0\71\6\u0107\0"+
    "\11\6\1\0\55\6\1\0\11\6\17\0\12\11\30\0\36\6\2\0"+
    "\26\6\1\0\16\6\u0349\0\u039a\6\146\0\157\6\21\0\304\6\u0abc\0"+
    "\u042f\6\u0fd1\0\u0247\6\u21b9\0\u0239\6\7\0\37\6\1\0\12\11\146\0"+
    "\36\6\2\0\5\6\13\0\67\6\11\0\4\6\14\0\12\11\11\0"+
    "\25\6\5\0\23\6\u0370\0\105\6\13\0\57\6\20\0\21\6\100\0"+
    "\1\6\37\0\u17ed\6\23\0\u02f3\6\u250d\0\2\6\u0bfe\0\153\6\5\0"+
    "\15\6\3\0\11\6\7\0\12\6\3\0\2\6\u14c6\0\5\6\3\0"+
    "\6\6\10\0\10\6\2\0\7\6\36\0\4\6\224\0\3\6\u01bb\0"+
    "\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0"+
    "\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0"+
    "\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0"+
    "\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0"+
    "\62\11\u0200\0\67\6\4\0\62\6\10\0\1\6\16\0\1\6\26\0"+
    "\5\6\1\0\17\6\u0550\0\7\6\1\0\21\6\2\0\7\6\1\0"+
    "\2\6\1\0\5\6\u07d5\0\305\6\13\0\7\6\51\0\113\6\5\0"+
    "\12\11\u04a6\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0"+
    "\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0"+
    "\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0"+
    "\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u0274\0\32\6\6\0"+
    "\32\6\6\0\32\6\u0e76\0\ua6d7\6\51\0\u1035\6\13\0\336\6\2\0"+
    "\u1682\6\u295e\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\6\1\12\0\1\3\3\0\2\4"+
    "\4\0\2\5\4\0\2\6\5\0\2\7\2\10\17\0"+
    "\2\11\7\0\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\66\0\154\0\207\0\242"+
    "\0\275\0\330\0\363\0\u010e\0\207\0\u0129\0\242\0\u0144"+
    "\0\u015f\0\u017a\0\u0195\0\u01b0\0\u01cb\0\66\0\u01e6\0\u0201"+
    "\0\u021c\0\u0237\0\66\0\u0252\0\u026d\0\u0288\0\u02a3\0\u02be"+
    "\0\66\0\u02d9\0\u02f4\0\u030f\0\u032a\0\u0345\0\66\0\u0360"+
    "\0\u037b\0\u0396\0\u03b1\0\u03cc\0\u03e7\0\66\0\u0402\0\66"+
    "\0\u041d\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf\0\u04da"+
    "\0\u04f5\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c\0\u0597\0\u05b2"+
    "\0\66\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639\0\u0654\0\u066f"+
    "\0\u066f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\0\1\5\1\3\1\6\1\3"+
    "\1\7\2\3\1\5\17\3\1\4\2\5\1\0\1\5"+
    "\1\10\1\6\1\3\1\11\1\12\1\3\1\5\1\10"+
    "\1\13\3\10\2\3\7\10\35\0\1\5\36\0\1\14"+
    "\1\0\3\14\2\0\5\14\2\0\7\14\11\0\1\15"+
    "\2\0\1\16\24\0\1\17\1\20\1\0\2\17\2\0"+
    "\5\17\2\0\7\17\6\0\1\17\1\20\1\0\1\21"+
    "\1\17\1\0\1\16\5\17\2\0\7\17\6\0\1\17"+
    "\1\20\1\0\1\17\1\22\1\0\1\23\5\24\2\0"+
    "\7\24\6\0\1\17\1\20\1\0\2\17\2\0\2\17"+
    "\1\25\2\17\2\0\7\17\2\0\1\26\3\0\1\14"+
    "\1\0\3\14\2\0\5\14\2\0\7\14\12\0\1\27"+
    "\26\0\1\30\2\0\2\30\2\0\5\30\2\0\7\30"+
    "\6\0\1\17\1\20\1\0\1\31\1\17\1\0\1\16"+
    "\5\17\2\0\7\17\1\0\1\32\1\33\3\0\1\17"+
    "\1\20\1\0\2\17\1\0\1\34\5\35\2\0\7\35"+
    "\12\0\1\36\26\0\1\17\1\20\1\0\1\17\1\35"+
    "\1\0\1\23\5\24\2\0\7\24\6\0\1\17\1\20"+
    "\1\0\2\17\2\0\2\17\1\37\2\17\2\0\7\17"+
    "\1\0\1\40\1\41\7\0\1\27\1\0\1\42\5\27"+
    "\2\0\7\27\6\0\1\30\1\0\1\43\2\30\2\0"+
    "\5\30\2\0\7\30\6\0\1\17\1\20\1\0\1\44"+
    "\1\17\1\45\1\16\5\17\2\0\7\17\2\0\1\33"+
    "\31\0\1\46\1\47\31\0\1\46\1\47\3\0\1\17"+
    "\1\20\1\0\2\17\1\0\1\34\5\35\2\0\7\35"+
    "\1\0\1\46\1\47\11\0\1\34\5\36\2\0\7\36"+
    "\6\0\1\17\1\20\1\0\2\17\2\0\3\17\1\50"+
    "\1\17\2\0\7\17\2\0\1\41\31\0\1\40\1\41"+
    "\7\0\1\27\26\0\1\51\2\0\2\51\2\0\5\51"+
    "\2\0\7\51\6\0\1\17\1\20\1\0\1\52\1\17"+
    "\1\0\1\16\5\17\2\0\7\17\11\0\1\53\23\0"+
    "\1\47\36\0\1\17\1\20\1\0\2\17\2\0\4\17"+
    "\1\54\2\0\7\17\1\0\1\55\1\56\3\0\1\51"+
    "\2\0\2\51\2\0\5\51\2\0\7\51\1\0\1\57"+
    "\1\60\3\0\1\17\1\20\1\0\1\61\1\17\1\0"+
    "\1\16\5\17\2\0\7\17\11\0\1\62\27\0\1\17"+
    "\1\20\1\0\2\17\2\0\5\17\1\63\1\0\7\17"+
    "\2\0\1\56\32\0\1\60\36\0\1\17\1\20\1\0"+
    "\1\61\1\17\1\0\1\16\5\17\2\0\7\17\11\0"+
    "\1\64\44\0\1\65\22\0\1\66\42\0\1\67\20\0"+
    "\1\70\45\0\1\71\17\0\1\72\46\0\1\73\16\0"+
    "\1\74\40\0\1\75\24\0\1\76\37\0\1\77\15\0"+
    "\1\100\1\101\56\0\1\102\6\0\1\101\57\0\1\103"+
    "\3\0\1\104\2\0\1\104\2\0\25\104\30\0\1\105"+
    "\33\0\1\106\33\0\1\107\23\0\1\110\15\0\1\111"+
    "\2\0\2\111\2\0\5\111\2\0\7\111";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1674];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\6\1\12\0\1\11\3\0"+
    "\1\1\1\11\4\0\1\1\1\11\4\0\1\1\1\11"+
    "\5\0\1\1\1\11\1\1\1\11\17\0\1\1\1\11"+
    "\7\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2858) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return "END";
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return "scree";
            } 
            // fall through
          case 11: break;
          case 2: 
            { return "wh";
            } 
            // fall through
          case 12: break;
          case 3: 
            { return "INSTAGRAM HANDLE: " + yytext();
            } 
            // fall through
          case 13: break;
          case 4: 
            { return "STATE: " + yytext();
            } 
            // fall through
          case 14: break;
          case 5: 
            { return "STREET ADDRESS: " + yytext();
            } 
            // fall through
          case 15: break;
          case 6: 
            { return "NAME: " + yytext();
            } 
            // fall through
          case 16: break;
          case 7: 
            { return "EMAIL ADDRESS: " + yytext();
            } 
            // fall through
          case 17: break;
          case 8: 
            { return "ZIP CODE: " + yytext();
            } 
            // fall through
          case 18: break;
          case 9: 
            { return "PHONE NUMBER: " + yytext();
            } 
            // fall through
          case 19: break;
          case 10: 
            { return "GITHUB: " + yytext();
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
